Q-1  linear search

#include<bits/stdc++.h>
using namespace std;
void linear_search(int arr[],int n,int k){
    int c=1;
    for(int i=0;i<n;i++){
        if(arr[i]==k) {
            cout<<"present "<<c;
            return ;
        }
            c++;
    }
    cout<<"not present "<<c;
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"enter the element to be searched = ";
    int k;
    cin>>k;
    linear_search(arr,n,k);
    return 0;
}







Q-2  binary search 

#include<bits/stdc++.h>
using namespace std;
void binary_search(int arr[],int n,int k){
    int c=1;
    int s=0,e=n-1,m;
    while(s<=e){
        m = s+(e-s)/2;
        if(arr[m]==k) {
            cout<<"present "<<c;
            return ;
        }
        else if(arr[m]<k){
            s=m+1;
        }
        else e=m-1;
        c++;
    }
    cout<<"not present "<<c;
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array in sorted form"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"enter the element to be searched = ";
    int k;
    cin>>k;
    binary_search(arr,n,k);
    return 0;
}







Q-3  jump search

#include<bits/stdc++.h>
using namespace std;
void jump_search(int arr[],int n,int k){
    int start = 0;
    int c=1;
    int end = sqrt(n);
    while(arr[end] < k && end < n){
      c++;
        start = end;
        end = end + sqrt(n);
        if(end > n - 1)
           {
            end = n-1;
            break;
           }
    }
	   for(int i = start; i <= end; i++) { 
      if(arr[i] == k)
         {
          cout<<"present "<<c;
         return ;
         }
    }
    cout<<"not present "<<c;
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array in sorted form"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"enter the element to be searched = ";
    int k;
    cin>>k;
    jump_search(arr,n,k);
    return 0;
}








Q-4  find duplicate's


#include<bits/stdc++.h>
using namespace std;
int last(int arr[],int n,int k){
    int c=1;
    int s=0,e=n-1,m,ans=-1;
    while(s<=e){
        m = s+(e-s)/2;
        if(arr[m]==k) {
            ans = m;
            s=m+1;
        }
        else if(arr[m]<k){
            s=m+1;
        }
        else e=m-1;
    }
    return ans;
}
int first(int arr[],int n,int k){
    int c=1;
    int s=0,e=n-1,m,ans=-1;
    while(s<=e){
        m = s+(e-s)/2;
        if(arr[m]==k) {
            ans = m;
            e=m-1;
        }
        else if(arr[m]<k){
            s=m+1;
        }
        else e=m-1;
    }
    return ans;
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array in sorted form"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"enter the element to be searched = ";
    int k;
    cin>>k;
    if(last(arr,n,k)==-1 || first(arr,n,k)==-1) cout<<"not present";
    else cout<<k<<" "<<last(arr,n,k)-first(arr,n,k)+1;
    return 0;
}








Q-5  find triplets

#include <bits/stdc++.h>
using namespace std;
void solve(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            for (int k = j + 1; k < n; k++)
            {
                if (arr[i] + arr[j] == arr[k])
                {
                    cout << i + 1 << " " << j + 1 << " " << k + 1;
                    return;
                }
            }
        }
    }
    cout << "No sequence found";
}
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cout << "enter the size of array = ";
        cin >> n;
        int arr[n];
        cout << "enter the elements of array" << endl;
        for (int i = 0; i < n; i++)
        {
            cin >> arr[i];
        }
        solve(arr, n);
    }
    








Q-6  count pair's

#include<bits/stdc++.h>
using namespace std;
void solve(int arr[],int n,int k){
    int c=0;
    for (int i = 0; i < n; i++){
        for (int j = i + 1; j < n; j++){
            if(abs(arr[i]-arr[j])==k){
                c++;
            }
        }
    }
    cout<<c;
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
     cout<<"enter the element to be searched = ";
    int k;
    cin>>k;
    solve(arr,n,k);
    return 0;
}








Q-7   insertion sort

#include <iostream>
using namespace std;
void insertionSort(int arr[], int n, int &comparisons, int &shifts)
{
    for(int i=1;i<n;i++)
    {
        int key=arr[i];
        int j=i-1;
        while (j>=0&&arr[j]>key)
        {
            arr[j+1]=arr[j];
            j--;
            comparisons++;
            shifts++;
        }  
        arr[j+1]=key;
        shifts++;
    }
}

int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        for(int i=0;i<n;i++) 
        {
            cin>>arr[i];
        } 
        int comparisons=0,shifts=0;
        insertionSort(arr,n,comparisons,shifts);
        
        for (int i=0;i<n;i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
        cout<<"comparisons = "<<comparisons<<endl;
        cout<<"shifts = "<<shifts<<endl;
    }
    
    return 0;
}









Q-8   selection sort

#include <iostream>
using namespace std;

void selectionSort(int arr[], int n, int& comparisons, int& swaps) {
    for (int i=0;i<n-1;i++)
    {
        int min_idx=i;
        for (int j=i+1;j<n;j++)
        {
            comparisons++;
            if (arr[j]<arr[min_idx])
            {
                min_idx=j;
            }
        }
        swaps++;
        swap(arr[min_idx],arr[i]);
    }
}

int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        for (int i=0;i<n;i++) 
        {
            cin>>arr[i];
        }
        int comparisons=0,swaps=0;
        selectionSort(arr,n,comparisons,swaps);
        for (int i=0;i<n;i++) 
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
        cout<<"comparisons = "<<comparisons<<endl;
        cout<<"swaps = "<<swaps<<endl;
    }
    return 0;
}









Q-9   duplicate element's

#include<bits/stdc++.h>
using namespace std;
void duplicate(int arr[],int n){
    sort(arr,arr+n);
    for(int i=1;i<n;i++){
        if(arr[i]==arr[i-1]){
            cout<<"True";
            return ;
        }
    }
    cout<<"False";
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    duplicate(arr,n);
    return 0;
}








Q-10  merge sort

#include <bits/stdc++.h>
using namespace std;

void merge(int arr[],int l,int m,int r,int &comp,int &inv) {
    int n1=m-l+1;
    int n2=r-m;
    int L[n1],R[n2];
    for (int i=0;i<n1;i++)
        L[i]=arr[l+i];
    for (int j=0;j<n2;j++)
        R[j]=arr[m+1+j];
    int i=0,j=0,k=l;
    while (i<n1&&j<n2) {
        comp++;
        if (L[i]<=R[j])
            arr[k++]=L[i++];
        else 
        {
            arr[k++]=R[j++];
            inv+=n1-i;
        }
    }
    while(i<n1)
        arr[k++]=L[i++];
    while(j<n2)
        arr[k++]=R[j++];
}

void mergeSort(int arr[],int l,int r,int &comp,int &inv) 
{
    if (l>=r)
        return;
    int m=l+(r-l)/2;
    mergeSort(arr,l,m,comp,inv);
    mergeSort(arr,m+1,r,comp,inv);
    merge(arr,l,m,r,comp,inv);
}

int main() {
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        int comp=0,inv=0;
        mergeSort(arr,0,n-1,comp,inv);
        for(int i=0;i<n;i++)
            cout<<arr[i]<<" ";
        cout<<"\ncomparisons = "<<comp<< "\ninversions = "<<inv<<"\n";
    }
    return 0;
}








Q-11  quick sort

#include<bits/stdc++.h>
using namespace std;
int partition(int arr[], int s, int e)
{
 
    int pivot = arr[s];
    int c = 0;
    for (int i = s + 1; i <= e; i++) {
        if (arr[i] <= pivot)
            c++;
    }
    int pivotIndex = s + c;
    swap(arr[pivotIndex], arr[s]);
    int i = s, j = e;
 
    while (i < pivotIndex && j > pivotIndex) {
 
        while (arr[i] <= pivot) i++;
        while (arr[j] > pivot)j--;
        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }
 
    return pivotIndex;
}
 
void quickSort(int arr[], int start, int end)
{
    if (start >= end)
        return;
    int p = partition(arr, start, end);
    quickSort(arr, start, p - 1);
    quickSort(arr, p + 1, end);
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    quickSort(arr,0,n-1);
    for(auto i:arr) cout<<i<<" ";
    return 0;
}










Q-12  kth smallest element

#include<bits/stdc++.h>
using namespace std;
void count_sort(int arr[],int n){
    int maxi = 0;
    for(int i=0;i<n;i++){
        maxi = max(maxi,arr[i]);
    }
    // cout<<maxi<<endl;
    int temp[maxi];
    for(int i=0;i<=maxi;i++){
        temp[i] = 0;
    }
    for(int i=0;i<n;i++){
        temp[arr[i]]++;
    }
    int j=0;
    for(int i=0;i<=maxi;i++){
        while(temp[i]!=0){
            arr[j++] = i;
            temp[i]--;
        }
     }
    // for(int i=0;i<n;i++){
    //     cout<<arr[i]<<" ";
    // }
}
int main()
{
    int n;
    cout<<"enter the size of array = ";
    cin>>n;
    int arr[n];
    cout<<"enter the elements of array"<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    count_sort(arr,n);
    int k;
    cout<<"enter the kth element index =" ;
    cin>>k;
    cout<<"kth smallest element = "<<arr[k-1]<<endl;
    cout<<"kth largest element = "<<arr[n-k];
    return 0;
}







Q-13  maximum occuring element

#include<bits/stdc++.h>
using namespace std;

void getMaxOccurringChar(char arr[], int n)
{
    int count[26]={0}; 
    
    for(int i=0;i<n;i++) 
    {
        count[arr[i]-'a']++; 
    }
    
    int max_count=0;
    char max_char=' ';
    for(int i=0;i<26;i++)
    {
        if(count[i]>max_count) 
        {
            max_count=count[i]; 
            max_char=char(i + 'a'); 
        }
    }
    
    if(max_count > 1)
    {
        cout<<max_char<<" - "<<max_count<<endl;
    } 
    else 
    {
        cout<<"No Duplicates Present"<<endl;
    }
}

int main() 
{
    int t;
    cin>>t;
    
    while(t--)
    {
        int n;
        cin>>n;
        
        char arr[n];
        for(int i=0;i<n;i++) 
        {
            cin>>arr[i];
        }
        
        getMaxOccurringChar(arr, n);
    }
    return 0;
}









Q-14 find pair's

#include<bits/stdc++.h>
using namespace std;
void count_sort(int arr[],int n){
    int maxi = 0;
    for(int i=0;i<n;i++){
        maxi = max(maxi,arr[i]);
    }
    // cout<<maxi<<endl;
    int temp[maxi];
    for(int i=0;i<=maxi;i++){
        temp[i] = 0;
    }
    for(int i=0;i<n;i++){
        temp[arr[i]]++;
    }
    int j=0;
    for(int i=0;i<=maxi;i++){
        while(temp[i]!=0){
            arr[j++] = i;
            temp[i]--;
        }
     }
    // for(int i=0;i<n;i++){
    //     cout<<arr[i]<<" ";
    // }
}
void find_pair(int arr[],int n,int key){
    count_sort(arr,n);
    int i=0;int j=n-1;
    while(i<j){
        int sum=arr[i]+arr[j];
        if(sum==key){
            cout<<arr[i]<<" "<<arr[j];
            return;
        }
        else if(sum<key){
            i++;
        }
        else{
            j--;
        }
    }
    cout<<"Pair not found."<<endl;
}

int main(){
    int n,key;
    cout<<"Enter the size of the array: ";
    cin>>n;
    int arr[n];
    cout<<"Enter the elements in array: ";
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"Enter the key element: ";
    cin>>key;
    find_pair(arr,n,key);
    return 0;
}









Q-15  common element

#include<bits/stdc++.h>
using namespace std;

void common_elements(int arr1[],int m,int arr2[],int n){
    sort(arr1,arr1+m);
    sort(arr2,arr2+n);
    for(int i=0,j=0;i<m && j<n; ){
            if(arr1[i]==arr2[j]){
                cout<< arr1[i] <<" ";
                i++;
                j++;
            }
            else if( arr1[i]<arr2[j]){
                i++;
            }
            else{
                j++;
            }
    }
}

int main(){
    int m,n;
    cout<<"Enter the size of array 1: ";
    cin>>m;
    int arr1[m];
    cout<<"Enter the elements in array 1: ";
    for(int i=0;i<m;i++){
        cin>>arr1[i];
    }
    cout<<"Enter the size of array 2: ";
    cin>>n;
    int arr2[n];
    cout<<"Enter the elements in array 2: ";
    for(int i=0;i<n;i++){
        cin>>arr2[i];
    }
    common_elements(arr1,m,arr2,n);
    cout<<endl;
    return 0;
}